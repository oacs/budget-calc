generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  createInputTypes                 = "false"
  useMultipleFiles                 = "false"
  createModelTypes                 = "true"
  addIncludeType                   = "false"
  addInputTypeValidation           = "false"
  createOptionalDefaultValuesTypes = "true"
  addSelectType                    = "false"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  transactions          Transaction[]
  transactionCategories TransactionCategory[]
  recurringTransactions RecurringTransaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TransactionCategory {
  id                   String                 @id @default(cuid())
  userId               String
  name                 String?
  type                 TypeTransaction
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  transactions         Transaction[]
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  RecurringTransaction RecurringTransaction[]

  @@index([userId])
}

model Transaction {
  id              String               @id @default(cuid())
  userId          String
  categoryId      String?
  type            TypeTransaction
  amount          Float
  description     String?              @db.Text
  transactionDate DateTime
  recurringId     String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now())
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        TransactionCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
}

model RecurringTransaction {
  id         String               @id @default(cuid())
  /// @zod.custom.omit([input])
  userId     String
  categoryId String?
  type       TypeTransaction
  frequency  Frequency            @default(NONE)
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @default(now())
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   TransactionCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
}

enum TypeTransaction {
  EXPENSE
  INCOME
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  NONE
}
